{"ast":null,"code":"var _jsxFileName = \"e:\\\\Placement\\\\live-polling-system\\\\live-polling-system\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.NODE_ENV === \"production\" ? \"https://live-polling-system-qjpn.onrender.com\" : \"http://localhost:3001\";\nfunction App() {\n  _s();\n  const [polls, setPolls] = useState([]);\n  const [students, setStudents] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [currentPoll, setCurrentPoll] = useState(null);\n  const [studentName, setStudentName] = useState(\"\");\n  const [messageText, setMessageText] = useState(\"\");\n\n  // Load initial data from backend (or fallback to localStorage)\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const pollRes = await fetch(`${API_URL}/api/polls`);\n        const studentRes = await fetch(`${API_URL}/api/students`);\n        const messageRes = await fetch(`${API_URL}/api/messages`);\n        if (pollRes.ok) {\n          const pollData = await pollRes.json();\n          setPolls(pollData);\n          localStorage.setItem(\"polls\", JSON.stringify(pollData));\n        } else {\n          setPolls(JSON.parse(localStorage.getItem(\"polls\") || \"[]\"));\n        }\n        if (studentRes.ok) {\n          const studentData = await studentRes.json();\n          setStudents(studentData);\n          localStorage.setItem(\"students\", JSON.stringify(studentData));\n        } else {\n          setStudents(JSON.parse(localStorage.getItem(\"students\") || \"[]\"));\n        }\n        if (messageRes.ok) {\n          const messageData = await messageRes.json();\n          setMessages(messageData);\n          localStorage.setItem(\"messages\", JSON.stringify(messageData));\n        } else {\n          setMessages(JSON.parse(localStorage.getItem(\"messages\") || \"[]\"));\n        }\n      } catch (err) {\n        console.error(\"Backend fetch failed, using cached data:\", err);\n        setPolls(JSON.parse(localStorage.getItem(\"polls\") || \"[]\"));\n        setStudents(JSON.parse(localStorage.getItem(\"students\") || \"[]\"));\n        setMessages(JSON.parse(localStorage.getItem(\"messages\") || \"[]\"));\n      }\n    };\n    fetchData();\n\n    // Optional: refresh every 10 seconds\n    const interval = setInterval(fetchData, 10000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Add new student\n  const handleAddStudent = async () => {\n    if (!studentName.trim()) return;\n    try {\n      const res = await fetch(`${API_URL}/api/students`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: studentName\n        })\n      });\n      if (res.ok) {\n        const newStudent = await res.json();\n        const updatedStudents = [...students, newStudent];\n        setStudents(updatedStudents);\n        localStorage.setItem(\"students\", JSON.stringify(updatedStudents));\n        setStudentName(\"\");\n      }\n    } catch (err) {\n      console.error(\"Failed to add student:\", err);\n    }\n  };\n\n  // Remove student\n  const handleRemoveStudent = async name => {\n    try {\n      await fetch(`${API_URL}/api/students/${name}`, {\n        method: \"DELETE\"\n      });\n      const updatedStudents = students.filter(s => s.name !== name);\n      setStudents(updatedStudents);\n      localStorage.setItem(\"students\", JSON.stringify(updatedStudents));\n    } catch (err) {\n      console.error(\"Failed to remove student:\", err);\n    }\n  };\n\n  // Create a new poll\n  const handleCreatePoll = async (question, options) => {\n    try {\n      const res = await fetch(`${API_URL}/api/polls`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          question,\n          options\n        })\n      });\n      if (res.ok) {\n        const newPoll = await res.json();\n        const updatedPolls = [...polls, newPoll];\n        setPolls(updatedPolls);\n        localStorage.setItem(\"polls\", JSON.stringify(updatedPolls));\n        setCurrentPoll(newPoll);\n      }\n    } catch (err) {\n      console.error(\"Failed to create poll:\", err);\n    }\n  };\n\n  // Submit poll answer\n  const handleVote = async (pollId, option) => {\n    try {\n      await fetch(`${API_URL}/api/answers`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          pollId,\n          option\n        })\n      });\n      // Update poll results from backend\n      const res = await fetch(`${API_URL}/api/polls/${pollId}`);\n      if (res.ok) {\n        const updatedPoll = await res.json();\n        const updatedPolls = polls.map(p => p._id === pollId ? updatedPoll : p);\n        setPolls(updatedPolls);\n        localStorage.setItem(\"polls\", JSON.stringify(updatedPolls));\n        setCurrentPoll(updatedPoll);\n      }\n    } catch (err) {\n      console.error(\"Failed to submit answer:\", err);\n    }\n  };\n\n  // Send chat message\n  const handleSendMessage = async () => {\n    if (!messageText.trim()) return;\n    try {\n      const res = await fetch(`${API_URL}/api/messages`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          text: messageText\n        })\n      });\n      if (res.ok) {\n        const newMessage = await res.json();\n        const updatedMessages = [...messages, newMessage];\n        setMessages(updatedMessages);\n        localStorage.setItem(\"messages\", JSON.stringify(updatedMessages));\n        setMessageText(\"\");\n      }\n    } catch (err) {\n      console.error(\"Failed to send message:\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Live Polling System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Students\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: studentName,\n        onChange: e => setStudentName(e.target.value),\n        placeholder: \"Enter name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddStudent,\n        children: \"Join\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: students.map(s => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [s.name, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRemoveStudent(s.name),\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 24\n          }, this)]\n        }, s.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create Poll\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Current Poll\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), currentPoll ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: currentPoll.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this), currentPoll.options.map(opt => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleVote(currentPoll._id, opt),\n          children: opt\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No active poll\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: messageText,\n        onChange: e => setMessageText(e.target.value),\n        placeholder: \"Type message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: messages.map((m, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: m.text\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 34\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"SL/+mAWg4d7akLho3EoF72hJPXg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_URL","process","env","NODE_ENV","App","_s","polls","setPolls","students","setStudents","messages","setMessages","currentPoll","setCurrentPoll","studentName","setStudentName","messageText","setMessageText","fetchData","pollRes","fetch","studentRes","messageRes","ok","pollData","json","localStorage","setItem","JSON","stringify","parse","getItem","studentData","messageData","err","console","error","interval","setInterval","clearInterval","handleAddStudent","trim","res","method","headers","body","name","newStudent","updatedStudents","handleRemoveStudent","filter","s","handleCreatePoll","question","options","newPoll","updatedPolls","handleVote","pollId","option","updatedPoll","map","p","_id","handleSendMessage","text","newMessage","updatedMessages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","opt","m","i","_c","$RefreshReg$"],"sources":["e:/Placement/live-polling-system/live-polling-system/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst API_URL = \n  process.env.NODE_ENV === \"production\"\n    ? \"https://live-polling-system-qjpn.onrender.com\"\n    : \"http://localhost:3001\";\n\nfunction App() {\n  const [polls, setPolls] = useState([]);\n  const [students, setStudents] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [currentPoll, setCurrentPoll] = useState(null);\n  const [studentName, setStudentName] = useState(\"\");\n  const [messageText, setMessageText] = useState(\"\");\n\n  // Load initial data from backend (or fallback to localStorage)\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const pollRes = await fetch(`${API_URL}/api/polls`);\n        const studentRes = await fetch(`${API_URL}/api/students`);\n        const messageRes = await fetch(`${API_URL}/api/messages`);\n\n        if (pollRes.ok) {\n          const pollData = await pollRes.json();\n          setPolls(pollData);\n          localStorage.setItem(\"polls\", JSON.stringify(pollData));\n        } else {\n          setPolls(JSON.parse(localStorage.getItem(\"polls\") || \"[]\"));\n        }\n\n        if (studentRes.ok) {\n          const studentData = await studentRes.json();\n          setStudents(studentData);\n          localStorage.setItem(\"students\", JSON.stringify(studentData));\n        } else {\n          setStudents(JSON.parse(localStorage.getItem(\"students\") || \"[]\"));\n        }\n\n        if (messageRes.ok) {\n          const messageData = await messageRes.json();\n          setMessages(messageData);\n          localStorage.setItem(\"messages\", JSON.stringify(messageData));\n        } else {\n          setMessages(JSON.parse(localStorage.getItem(\"messages\") || \"[]\"));\n        }\n      } catch (err) {\n        console.error(\"Backend fetch failed, using cached data:\", err);\n        setPolls(JSON.parse(localStorage.getItem(\"polls\") || \"[]\"));\n        setStudents(JSON.parse(localStorage.getItem(\"students\") || \"[]\"));\n        setMessages(JSON.parse(localStorage.getItem(\"messages\") || \"[]\"));\n      }\n    };\n    fetchData();\n\n    // Optional: refresh every 10 seconds\n    const interval = setInterval(fetchData, 10000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Add new student\n  const handleAddStudent = async () => {\n    if (!studentName.trim()) return;\n    try {\n      const res = await fetch(`${API_URL}/api/students`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ name: studentName })\n      });\n      if (res.ok) {\n        const newStudent = await res.json();\n        const updatedStudents = [...students, newStudent];\n        setStudents(updatedStudents);\n        localStorage.setItem(\"students\", JSON.stringify(updatedStudents));\n        setStudentName(\"\");\n      }\n    } catch (err) {\n      console.error(\"Failed to add student:\", err);\n    }\n  };\n\n  // Remove student\n  const handleRemoveStudent = async (name) => {\n    try {\n      await fetch(`${API_URL}/api/students/${name}`, { method: \"DELETE\" });\n      const updatedStudents = students.filter(s => s.name !== name);\n      setStudents(updatedStudents);\n      localStorage.setItem(\"students\", JSON.stringify(updatedStudents));\n    } catch (err) {\n      console.error(\"Failed to remove student:\", err);\n    }\n  };\n\n  // Create a new poll\n  const handleCreatePoll = async (question, options) => {\n    try {\n      const res = await fetch(`${API_URL}/api/polls`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ question, options })\n      });\n      if (res.ok) {\n        const newPoll = await res.json();\n        const updatedPolls = [...polls, newPoll];\n        setPolls(updatedPolls);\n        localStorage.setItem(\"polls\", JSON.stringify(updatedPolls));\n        setCurrentPoll(newPoll);\n      }\n    } catch (err) {\n      console.error(\"Failed to create poll:\", err);\n    }\n  };\n\n  // Submit poll answer\n  const handleVote = async (pollId, option) => {\n    try {\n      await fetch(`${API_URL}/api/answers`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ pollId, option })\n      });\n      // Update poll results from backend\n      const res = await fetch(`${API_URL}/api/polls/${pollId}`);\n      if (res.ok) {\n        const updatedPoll = await res.json();\n        const updatedPolls = polls.map(p => p._id === pollId ? updatedPoll : p);\n        setPolls(updatedPolls);\n        localStorage.setItem(\"polls\", JSON.stringify(updatedPolls));\n        setCurrentPoll(updatedPoll);\n      }\n    } catch (err) {\n      console.error(\"Failed to submit answer:\", err);\n    }\n  };\n\n  // Send chat message\n  const handleSendMessage = async () => {\n    if (!messageText.trim()) return;\n    try {\n      const res = await fetch(`${API_URL}/api/messages`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ text: messageText })\n      });\n      if (res.ok) {\n        const newMessage = await res.json();\n        const updatedMessages = [...messages, newMessage];\n        setMessages(updatedMessages);\n        localStorage.setItem(\"messages\", JSON.stringify(updatedMessages));\n        setMessageText(\"\");\n      }\n    } catch (err) {\n      console.error(\"Failed to send message:\", err);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Live Polling System</h1>\n\n      <section>\n        <h2>Students</h2>\n        <input \n          type=\"text\" \n          value={studentName} \n          onChange={e => setStudentName(e.target.value)} \n          placeholder=\"Enter name\"\n        />\n        <button onClick={handleAddStudent}>Join</button>\n        <ul>\n          {students.map(s => (\n            <li key={s.name}>\n              {s.name} <button onClick={() => handleRemoveStudent(s.name)}>Remove</button>\n            </li>\n          ))}\n        </ul>\n      </section>\n\n      <section>\n        <h2>Create Poll</h2>\n        {/* Add your form/UI to call handleCreatePoll(question, options) */}\n      </section>\n\n      <section>\n        <h2>Current Poll</h2>\n        {currentPoll ? (\n          <div>\n            <h3>{currentPoll.question}</h3>\n            {currentPoll.options.map(opt => (\n              <button key={opt} onClick={() => handleVote(currentPoll._id, opt)}>\n                {opt}\n              </button>\n            ))}\n          </div>\n        ) : <p>No active poll</p>}\n      </section>\n\n      <section>\n        <h2>Chat</h2>\n        <input \n          type=\"text\" \n          value={messageText} \n          onChange={e => setMessageText(e.target.value)} \n          placeholder=\"Type message\"\n        />\n        <button onClick={handleSendMessage}>Send</button>\n        <ul>\n          {messages.map((m,i) => <li key={i}>{m.text}</li>)}\n        </ul>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}